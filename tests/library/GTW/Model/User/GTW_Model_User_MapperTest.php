<?php

require_once dirname(__FILE__) . '/../../../../../library/GTW/Model/User/Mapper.php';
require_once dirname(__FILE__) . '/../../../../../library/GTW/Model/User/Status/Mapper.php';

/**
 * Test class for GTW_Model_User_Mapper.
 * Generated by PHPUnit on 2011-08-09 at 04:41:58.
 */
class GTW_Model_User_MapperTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var GTW_Model_User_Mapper
	 */
	protected $object;

	protected $_tableGateway = null;
	protected $_adapter = null;
	protected $_rowset = null;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->_tableGateway = $this->_getCleanMock('Zend_Db_Table_Abstract');
		$this->_adapter = $this->_getCleanMock('Zend_Db_Adapter_Abstract');
		$this->_rowset = $this->_getCleanMock('Zend_Db_Table_Rowset_Abstract');
		$this->_tableGateway->expects($this->any())->method('getAdapter')->will($this->returnValue($this->_adapter));

		$this->object = new GTW_Model_User_Mapper($this->_tableGateway);
	}

	protected function getStatusArray() {
		return array(
			'id'			=> 1,
			'status'		=> 'active',
			'description'	=> 'test description'
		);
	}

	protected function getUserArray() {
		return array(
			'id'			=> 1,
			'status'		=> new GTW_Model_User_Status($this->getStatusArray()),
			'email'			=> 'sean@skyseek.com',
			'first_name'	=> 'Sean',
			'last_name'		=> 'Thayne',
			'password'		=> md5('test123'),
			'role'			=> 'member'
		);
	}

	public function testSavesNewUserAndSetsUserIdOnSave() {
		//User!
		$userData = $this->getUserArray();
		unset($userData['id']);

		$user = new GTW_Model_User($userData);

		//Expected DB Data Array
		$expectedData = array('status_id'=>1) + $this->getUserArray();
		unset($expectedData['status'], $expectedData['id']);

		
		$this->_tableGateway->expects($this->once())
				->method('insert')
				->with($this->equalTo($expectedData))
				->will($this->returnValue(123));

		$this->object->save($user);
		$this->assertEquals(123, $user->id);
	}

	public function testUnfoundResult() {
		// set mock expectation on calling Zend_Db_Table::find()
		$this->_rowset->expects($this->once())
				->method('current')
				->will($this->returnValue(null));

		$this->_tableGateway->expects($this->once())
				->method('find')
				->with($this->equalTo(0))
				->will($this->returnValue($this->_rowset));

		$userResult = $this->object->find(0);
		$this->assertEquals(null, $userResult);
	}

	public function testFindsByIdAndReturnsDomainObject() {
		$user = new GTW_Model_User($this->getUserArray());
		$user->referenceId('status_id', 1);

		// expected rowset result for found entry
		$dbData = new stdClass;
		$dbData->id			= 1;
		$dbData->status_id	= 1;
		$dbData->email		= 'sean@skyseek.com';
		$dbData->first_name	= 'Sean';
		$dbData->last_name	= 'Thayne';
		$dbData->password	= md5('test123');
		$dbData->role		= 'member';

		// set mock expectation on calling Zend_Db_Table::find()
		$this->_rowset->expects($this->once())
				->method('current')
				->will($this->returnValue($dbData));

		$this->_tableGateway->expects($this->once())
				->method('find')
				->with($this->equalTo(1))
				->will($this->returnValue($this->_rowset));

		$statusMaper = $this->_getCleanMock('GTW_Model_User_Status_Mapper');
		$statusMaper->expects($this->once())
				->method('find')->with($this->equalTo(1))
				->will($this->returnValue(new GTW_Model_User_Status($this->getStatusArray())));

		$this->object->setStatusMapper($statusMaper);
		$userResult = $this->object->find(1, false);


		$this->assertEquals($user, $userResult);
	}

	public function testDeleteUsingEntryId() {
		$this->_adapter->expects($this->once())
				->method('quoteInto')
				->with($this->equalTo('id = ?'), $this->equalTo(1))
				->will($this->returnValue('id = 1'));

		$this->_tableGateway->expects($this->once())
				->method('delete')
				->with($this->equalTo('id = 1'));

		$this->object->delete(1);
	}





	public function testUpdateExistingUser() {

		$userData = $this->getUserArray();
		$user = new GTW_Model_User($userData);

		$expectedData = array('status_id'=>1) + $userData;
		unset($expectedData['id']);
		unset($expectedData['status']);


		// quoteInto() is called to escape parameters from the adapter
		$this->_adapter->expects($this->once())
				->method('quoteInto')
				->will($this->returnValue('id = 1'));

		$this->_tableGateway->expects($this->once())
				->method('update')
				->with($this->equalTo($expectedData), $this->equalTo('id = 1'));

		$this->object->save($user);
	}

	protected function _getCleanMock($className) {
		$class = new ReflectionClass($className);
		$methods = $class->getMethods();
		$stubMethods = array();

		foreach ($methods as $method)
			if ($method->isPublic() || ($method->isProtected() && $method->isAbstract()))
				$stubMethods[] = $method->getName();
		
		$mocked = $this->getMock(
			$className,
			$stubMethods,
			array(),
			$className . '_EntryMapperTestMock_' . uniqid(),
			false
		);

		return $mocked;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

}