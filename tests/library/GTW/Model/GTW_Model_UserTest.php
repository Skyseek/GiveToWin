<?php

require_once 'Skyseek/Model/Entity.php';

require_once dirname(__FILE__) . '/../../../../library/GTW/Model/User.php';
require_once dirname(__FILE__) . '/../../../../library/GTW/Model/User/Status.php';

/**
 * Test class for GTW_Model_User.
 * Generated by PHPUnit on 2011-08-08 at 13:25:47.
 */
class GTW_Model_UserTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var GTW_Model_User
	 */
	protected $object;

	public function testSetsAllowed() {
		$this->object->email = 'test@test.com';
		$this->assertEquals('test@test.com', $this->object->email);
	}
	
	protected function getStatusArray() {
		return array(
			'id'			=> 1,
			'status'		=> 'active',
			'description'	=> 'test description'
		);
	}

	protected function getUserArray() {
		return array(
			'id'			=> 1,
			'status'		=> new GTW_Model_User_Status($this->getStatusArray()),
			'email'			=> 'sean@skyseek.com',
			'first_name'	=> 'Sean',
			'last_name'		=> 'Thayne',
			'password'		=> md5('test123'),
			'role'			=> 'member'
		);
	}

	public function testLazyLoading() {
		$userData = $this->getUserArray();
		unset($userData['status']);

		$user = new GTW_Model_User();
		$user->referenceId('status_id', 1);
		
		$statusMapper = $this->_getCleanMock('GTW_Model_User_Status_Mapper');
		$statusMapper->expects($this->once())
			->method('find')
			->with($this->equalTo(1))
			->will($this->returnValue(new GTW_Model_User_Status($this->getStatusArray())));

		$user->statusMapper($statusMapper);

		
		$this->assertEquals('active', $user->status->status);

	}

	public function testArrayConstructor() {
		$statusData = array(
			'id'			=> 1,
			'status'		=> 'active',
			'description'	=> 'test description'
		);

		$data = array(
			'id'			=> 1,
			'status'		=> new GTW_Model_User_Status($statusData),
			'first_name'	=> 'Sean',
			'last_name'		=> 'Thayne',
			'email'			=> 'sean@skyseek.com',
			'password'		=> md5('test123'),
			'role'			=> 'guest'
		);

		$this->object = new GTW_Model_User($data);

		$data;
		$data['status'] = $statusData;

		$this->assertEquals($data, $this->object->toArray(true));
	}

	public function testSetPassword() {
		$this->object->setNewPassword('test123');
		$this->assertEquals(md5('test123'), $this->object->password);
	}

	public function testPropertyIsset() {
		$this->object->first_name = 'Sean';
		$this->assertTrue(isset($this->object->first_name));
	}

	public function testPropertyCanUnset() {
		$this->object->first_name = 'Sean';
		unset($this->object->first_name);

		$this->assertFalse(isset($this->object->first_name));
	}

	public function testInvalidProperty() {
		try {
			$this->object->invalid_property = true;
			$this->fail("Was able to set a invalid property");
		} catch (Exception $e) {
			return true;
		}
	}
	

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new GTW_Model_User;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	protected function _getCleanMock($className) {
		$class = new ReflectionClass($className);
		$methods = $class->getMethods();
		$stubMethods = array();

		foreach ($methods as $method)
			if ($method->isPublic() || ($method->isProtected() && $method->isAbstract()))
				$stubMethods[] = $method->getName();

		$mocked = $this->getMock(
			$className,
			$stubMethods,
			array(),
			$className . '_EntryMapperTestMock_' . uniqid(),
			false
		);

		return $mocked;
	}

}
